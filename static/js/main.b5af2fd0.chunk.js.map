{"version":3,"sources":["components/Weather.js","components/form.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["getMinMaxTemp","min","max","className","styles","cityWH","marginTop","kont","pozadina","background","Weather","props","city","country","temp","weatherIcon","minTemp","maxTemp","desc","humidity","style","error","role","forma","btn","padding","inp","Form","onSubmit","loadWeather","type","name","placeholder","autoComplete","Header","parag","API_KEY","App","getWeatherIcon","icon","rangeid","setState","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeather","e","a","preventDefault","target","elements","value","fetch","API_call","json","response","console","log","sys","calculateCelsius","main","min_temp","temp_min","max_temp","temp_max","description","weather","id","Math","floor","state","undefined","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5af2fd0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n\r\n    const { city, country, temp, weatherIcon, minTemp, maxTemp, desc, humidity } = props;\r\n\r\n    return (\r\n        <div className='container' style={styles.kont}>\r\n            <div className='card text-center' style={styles.pozadina}>\r\n                <div className='card-header'>\r\n                    {\r\n                        city && country && weatherIcon ? (\r\n                            <div>\r\n                                <i className={`wi ${weatherIcon} display-1`} />\r\n                                <h2 style={styles.cityWH}>\r\n                                    {city} , {country}\r\n                                </h2>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                </div>\r\n                <div className='card-body'>\r\n                    {\r\n                        temp ? (\r\n                            <h1 className='card-text'>\r\n                                {temp}&deg;\r\n                            </h1>\r\n                        ) : null\r\n                    }\r\n                </div>\r\n                <div className='card-footer'>\r\n                    <h4 className='card-text'>\r\n                        {getMinMaxTemp(minTemp, maxTemp)}\r\n                    </h4>\r\n                    <hr />\r\n                    <h2>\r\n                        {desc}\r\n                    </h2>\r\n                    {\r\n                        humidity ? (\r\n                            <div>\r\n                              <p>Humidity: {humidity}%</p>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst getMinMaxTemp = (min, max) => {\r\n    if (min, max) {\r\n        return (\r\n            <div className='container-fluid'>\r\n                <span>{min}&deg;{' '}</span>{' '}\r\n                {' '}<span>{max}&deg;{' '}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    cityWH: {\r\n        marginTop: '30px'\r\n    },\r\n    kont: {\r\n        marginTop: '20px',\r\n    },\r\n    pozadina: {\r\n        background: 'rgba(198, 198, 198, 0.7)',\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './forma.css';\r\n\r\n\r\nconst Form = (props) => {\r\n    return ( \r\n        <div className='container text-center' style={styles.forma}>\r\n            {\r\n                props.error ? (\r\n                    <div>\r\n                        {error()}\r\n                    </div>\r\n                ) : null\r\n            }\r\n           <form onSubmit={props.loadWeather}>\r\n               <div className='row'>\r\n                 <div className='col-md-6'>\r\n                 <input type='text' \r\n                      name='city' \r\n                      placeholder='City' \r\n                      className='form-control'\r\n                      autoComplete='off'\r\n                      style={styles.inp}\r\n                      />\r\n                 </div>\r\n                 <div className='col-md-6'>\r\n                 <input type='text' \r\n                      name='country' \r\n                      placeholder='Country' \r\n                      className='form-control'\r\n                      autoComplete='off'\r\n                      style={styles.inp}\r\n                      />\r\n                 </div>\r\n               </div>\r\n                <button className='btn btn-warning' style={styles.btn}>Get Weather</button>\r\n           </form>\r\n        </div>\r\n     );\r\n}\r\n\r\nconst error = () => {\r\n    return (\r\n        <div className='alert alert-danger' role='alert'>\r\n             <h4>You must enter all fields.</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    forma: {\r\n        marginTop: '50px',\r\n    },\r\n    btn: {\r\n        marginTop: '20px',\r\n        padding: '10px'\r\n    },\r\n    inp: {\r\n        background: 'transparent',\r\n        \r\n    }\r\n\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return ( \r\n        <div className='container text-center'>\r\n           <p>{props.parag}</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Header;","import React, { Component } from 'react';\nimport { async } from 'q';\nimport Weather from './components/Weather';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './components/form';\nimport Header from './components/Header';\n\nconst API_KEY = 'eba580c0b93bbb85939a4e6ca7eabda9';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n       city: undefined,\n       country: undefined,\n       temp: undefined,\n       min_temp: undefined,\n       max_temp: undefined,\n       description:undefined,\n       icon: undefined,\n       humidity: undefined,\n       error: false\n   }\n\n   this.weatherIcon = {\n     Thunderstorm: 'wi-night-thunderstorm',\n     Drizzle: 'wi-cloudy-windy',\n     Rain: 'wi-rain',\n     Snow: 'wi-snow',\n     Atmosphere: 'wi-fog',\n     Clear: 'wi-day-sunny',\n     Clouds: 'wi-cloudy'\n   }\n\n  }\n\n  getWeatherIcon = (icon, rangeid) => { \n      switch(true)\n      {\n        case rangeid >= 200 && rangeid <= 232:\n           this.setState({ \n             icon: this.weatherIcon.Thunderstorm\n            });\n        break;\n        case rangeid >= 300 && rangeid <= 321:\n           this.setState({ \n             icon: this.weatherIcon.Drizzle\n            });\n        break;\n        case rangeid >= 500 && rangeid <= 531:\n           this.setState({ \n             icon: this.weatherIcon.Rain\n            });\n        break;\n        case rangeid >= 600 && rangeid <= 622:\n           this.setState({ \n             icon: this.weatherIcon.Snow\n            });\n        break;\n        case rangeid >= 701 && rangeid <= 781:\n           this.setState({ \n             icon: this.weatherIcon.Atmosphere\n            });\n        break;\n        case rangeid === 800:\n           this.setState({ \n             icon: this.weatherIcon.Clear\n            });\n        break;\n        case rangeid >= 810 && rangeid <= 804:\n           this.setState({ \n             icon: this.weatherIcon.Clouds\n            });\n        break;\n        default: \n        return null;\n\n      }\n  }\n\n  getWeather = async(e) => {\n\n      e.preventDefault();\n      // get inputs\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      if(city, country)\n      {\n        const API_call =  await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n        const response = await API_call.json();\n         console.log(response);\n\n    this.setState({ \n        city: `${response.name}`,\n        country: `${response.sys.country}`,\n        temp: this.calculateCelsius(response.main.temp),\n        icon: this.weatherIcon.Thunderstorm,\n        min_temp: this.calculateCelsius(response.main.temp_min),\n        max_temp: this.calculateCelsius(response.main.temp_max),\n        description: response.weather[0].description,\n        humidity: response.main.humidity,\n        error: false\n      });\n\n      this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      } else {\n        this.setState({ \n          error:true\n          });\n      }\n    \n      \n\n   }\n\n   calculateCelsius = (temp) => {\n     let cel = Math.floor(temp - 273.15);\n     return cel;\n   } \n\n\n  render() {  \n    const {city, country, temp, icon, min_temp, max_temp, description, humidity, error} = this.state;\n    return ( \n      <div className=\"App\">\n         <div className='container'>\n             <Header parag='Developed by Danis Preldzic' />\n             <Form  loadWeather={this.getWeather}\n                    error={error}\n             />\n             <Weather city={city} \n                      country={country}\n                      temp={temp}\n                      weatherIcon={icon}\n                      minTemp={min_temp}\n                      maxTemp={max_temp}\n                      desc={description}\n                      humidity={humidity}\n             />\n         </div>\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}